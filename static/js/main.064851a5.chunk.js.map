{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","NONE","onSortByAlpabet","setState","ALPABET","onSortByLength","LENGTH","onReset","sortedGoods","goods","visibleGoods","sort","a","b","localeCompare","length","reverse","getReorderedGoods","this","className","type","classNames","onClick","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,wGAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA2CE,IAAME,EAAb,4MACEC,MAAQ,CACNC,YAAY,EACZC,SAAUL,EAASM,MAHvB,EAMEC,gBAAkB,WAChB,EAAKC,SAAS,CAAEH,SAAUL,EAASS,WAPvC,EAUEC,eAAiB,WACf,EAAKF,SAAS,CAAEH,SAAUL,EAASW,UAXvC,EAcEC,QAAU,WACR,EAAKJ,SAAS,CAAEH,SAAUL,EAASM,KAAMF,YAAY,KAfzD,4CAkBE,WAAU,IAAD,OACDS,EAlDH,SACLC,EADK,GAGJ,IADCT,EACF,EADEA,SAAUD,EACZ,EADYA,WAENW,EAAY,YAAOD,GAmBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQb,GACN,KAAKL,EAASS,QACZ,OAAOQ,EAAEE,cAAcD,GAEzB,KAAKlB,EAASW,OACZ,OAAOM,EAAEG,OAASF,EAAEE,OAEtB,QACE,OAAO,MAIThB,GACFW,EAAaM,UAGRN,EA2BeO,CAClBrB,EACAsB,KAAKpB,OAGP,EAAiCoB,KAAKpB,MAA9BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SAEpB,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYrB,IAAaL,EAASS,UAGtCkB,QAASJ,KAAKhB,gBARhB,iCAaA,wBACEkB,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYrB,IAAaL,EAASW,SAGtCgB,QAASJ,KAAKb,eARhB,4BAaA,wBACEe,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAatB,IAGjBuB,QAAS,WACP,EAAKnB,SAAS,CACZJ,YAAaA,KAVnB,sBAiBEC,IAAaL,EAASM,MAAQF,IAC9B,wBACEuB,QAASJ,KAAKX,QACda,KAAK,SACLD,UAAU,4BAHZ,sBAUJ,6BACE,6BACGX,EAAYe,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,iBAtFvB,GAAyBC,IAAMC,WC1D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.064851a5.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b): number => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return a.localeCompare(b);\n\n      case SortType.LENGTH:\n        return a.length - b.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  onSortByAlpabet = () => {\n    this.setState({ sortType: SortType.ALPABET });\n  };\n\n  onSortByLength = () => {\n    this.setState({ sortType: SortType.LENGTH });\n  };\n\n  onReset = () => {\n    this.setState({ sortType: SortType.NONE, isReversed: false });\n  };\n\n  render() {\n    const sortedGoods = getReorderedGoods(\n      goodsFromServer,\n      this.state,\n    );\n\n    const { isReversed, sortType } = this.state;\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-info',\n              {\n                'is-light': sortType !== SortType.ALPABET,\n              },\n            )}\n            onClick={this.onSortByAlpabet}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-success',\n              {\n                'is-light': sortType !== SortType.LENGTH,\n              },\n            )}\n            onClick={this.onSortByLength}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-warning',\n              {\n                'is-light': !isReversed,\n              },\n            )}\n            onClick={() => {\n              this.setState({\n                isReversed: !isReversed,\n              });\n            }}\n          >\n            Reverse\n          </button>\n\n          {(sortType !== SortType.NONE || isReversed) && (\n            <button\n              onClick={this.onReset}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )}\n\n        </div>\n        <ul>\n          <ul>\n            {sortedGoods.map(good => (\n              <li key={good} data-cy=\"Good\">{good}</li>\n            ))}\n          </ul>\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}